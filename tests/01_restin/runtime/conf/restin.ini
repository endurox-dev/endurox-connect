# additional view settings...
[@global]
VIEWDIR=${NDRX_APPHOME}/viewdir
VIEWFILES=restin.V

#
# JSON UBF test, sync
#
[@restin]
port=8080
ip=0.0.0.0
gencore=1
#
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
# Moved in middle - second pass config read test
#defaults={"errors":"http"
#        ,"reqlogsvc": "GETFILE"
#        ,"noreqfilersp": true
#	,"parseheaders": false
#	,"parsecookies": false
#        }
# json2UBF, errors JSON, sync
/svc1={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":false
	,"errfmt_json_code":"\"error_code1\":%d"
	,"errfmt_json_msg":"\"error_message1\":\"%s\""}
# Techo service:
/echo={"notime":false, "conv":"json2ubf", "errors":"json", "async":false, "echo":true}
# This should be the same as echo...
/svc1/async={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":true, "asyncecho":true}
# Have some timeout service...
# Long running, makes timeout
/longop/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"json"}
# This does not use the timeout, thus will succeed
/longop/ok={"svc":"LONGOP", "notime":true, "conv":"json2ubf", "errors":"json"}
# Test JSON2UBF error codes
/juerrors={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}
# Have some tests with http error codes
/httpe/ok={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# This will return server error
/httpe/fail={"svc":"FAILSV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# Have the timeout test case too... with http
/httpe/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http"}
# Test the error mapping of http
/httpe/tout/mapped={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http",
	"errors_fmt_http_map":"13:404,*:200"}
# Test JSON buffer format
/jsonbuf/ok={"svc":"JSONSV", "conv":"json", "errors":"json"}
# Test JSON buffer format, no error fields:
/jsonbuf/ok/no/status={"svc":"JSONSV", "conv":"json", "errors":"json", "errfmt_json_onsucc":false}
# Test JSON errors
/jsonbuf/fail={"svc":"FAILSV1", "conv":"json", "errors":"json"}
# Test Async JSON call
/jsonbuf/ok/async={"svc":"JSONSV", "conv":"json", "errors":"json", "async":true}
# Text buffer, ok
/text/ok={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":false}
# text buffer, with error
/text/fail={"svc":"FAILSV1", "conv":"text", "errors":"text", "async":false}
# Async text call, async echo false
/text/ok/async={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":true, "asyncecho":false}
# Async text call, async echo true
/text/ok/async/echo={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":true, "asyncecho":true}
# Carray buffer, ok
/binary/ok={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":false}
# Carray buffer, fail
/binary/fail={"svc":"FAILSV1", "conv":"raw", "errors":"text", "async":false}
# Carray buffer, ok, async
/binary/ok/async={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":true, "asyncecho":false}
# Carray buffer, ok, async, echo
/binary/ok/async/echo={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":true, "asyncecho":true}

##### THIS MUST BE READ FIRST
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
defaults={"errors":"http"
        ,"reqlogsvc": "GETFILE"
        ,"noreqfilersp": true
        ,"parseheaders": false
        ,"parsecookies": false
        }

# View tests....
# Respond with error installed in view, in case if no response fields in object
# The response will instantiate "RSPV" view
/view/ok={"svc":"VIEWSV1", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV"}
	
# error present in resposne
/view/ok/errsucc={"svc":"VIEWSV1", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":true, 
	"errfmt_view_rsp":"RSPV"}

# different response buffer, no error
/view/ok/diffbuff={"svc":"VIEWSV2", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false}

# Cant install error, but succeeds, ignore the case
/view/ok/noerr/errosucc={"svc":"VIEWSV2", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":true,
	"errfmt_view_rsp":"RSPV"}

# Service failure, respond with RSPV
/view/fail={"svc":"VIEWFAIL", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV"}
	
# Service failure, no where to to install the response, we shall get {}
/view/fail/norsp={"svc":"VIEWFAIL", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false}

# Async call, expect RSPV
/view/async={"svc":"VIEWSV1", "conv":"json2view", "errors":"json2view", "async":true,
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV", "view_notnull":true}

# Async call, echo, not null, string array should be stripped.
/view/async/echo={"svc":"VIEWSV1", "conv":"json2view", "errors":"json2view", "async":true,
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV", "view_notnull":true, "asyncecho":true}

# HTTP errors, ok
/view/httpe/ok={"svc":"VIEWSV1", "conv":"json2view", "errors":"http", "async":false, 
	"view_notnull":true}

# HTTP errors, fail
/view/httpe/fail={"svc":"VIEWFAIL", "conv":"json2view", "errors":"http", "async":false, 
	"view_notnull":true}

# errors inline in request buffer
/view/fail/einline={"svc":"VIEWFAIL2", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV"}

# errors first
/view/fail/efirst={"svc":"VIEWFAIL2", "conv":"json2view", "errors":"json2view",
	"errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":false, 
	"errfmt_view_rsp":"RSPV", "errfmt_view_rsp_first":true}	

# regexp url tests
/regexp/empty={"svc":"REGEXP", "format":"r", "conv":"json2ubf", "errors":"json"}
/regexp/valid/ubf.*={"svc":"REGEXP", "format":"r", "conv":"json2ubf", "errors":"json", "urlfield": "EX_NETGATEWAY"}
/regexp/valid/json.*={"svc":"REGEXPJSON", "format":"regexp", "conv":"json", "errors":"json", "urlfield": "Url"}
/regexp/invalid/.{5}={"svc":"REGEXP", "format":"r", "conv":"json2ubf", "errors":"json"}

# Header and Cookies url tests
/header={"svc":"COOKIES", "conv":"json2ubf", "errors":"json", "parseheaders": true}
/header/cookies={"svc":"COOKIES", "conv":"json2ubf", "errors":"json", "parseheaders": true, "parsecookies":true}
/noheader/cookies={"svc":"COOKIES", "conv":"json2ubf", "errors":"json", "parsecookies":true}

# Static handlers..:
# Process sub-dir of static
/static.*={"svc":"@STATIC", "format":"regexp", "conv":"static", "staticdir":"${NDRX_APPHOME}/static"}
# Load main page as index.html (default go handler)
/={"svc":"@STATIC", "conv":"static", "staticdir":"${NDRX_APPHOME}/static"}
# also the index.html of root is mapped to static too... 
/index.html={"svc":"@STATIC", "conv":"static", "staticdir":"${NDRX_APPHOME}/static"}

#
# Incoming POST handler ext mode
#
/ext_handler_form={"svc":"INOK"
	,"conv":"ext"
	,"errors":"ext"
	,"parseheaders":true
	,"parsecookies":true
	,"parseform":true
	,"finman":"INMAND"
	,"finopt":"NOSUCHSVC,INOPT"
	,"finerr":"INERR"
	,"foutman":"OUTMAND"
	,"foutopt":"OUTOPT"
	,"fouterr":"OUTERR"
	}
	
#
# Do not parse for, want body...
#
/ext_handler_noform={"svc":"INOK"
	,"conv":"ext"
	,"errors":"ext"
	,"parseheaders":true
	,"parsecookies":true
	#,"parseform":true
	,"finman":"INOK"
	,"finopt":"NOSUCHSVC,INOPT"
	,"finerr":"INERR"
	,"foutman":"OUTMAND"
	,"foutopt":"OUTOPT"
	,"fouterr":"OUTERR"
	}
	
#
# Receive no body
#
/ext_dum_ok={"svc":"INOK"
	,"conv":"ext"
	,"errors":"ext"
	}

/ext_dum_fail={"svc":"NOSUCHSVC"
	,"conv":"ext"
	,"errors":"ext"
	}

#
# Check that we process the query parameters
#
/ext_query={"svc":"REQPARAMS"
	,"conv":"ext"
	,"errors":"ext"
	}


#
# Check the error codes & UR codes
#
/ext_svcerrors={"svc":"REQERRCODES"
	,"conv":"ext"
	,"errors":"ext"
	,"foutman":"RSPERRFILTER"
	,"fouterr":"RSPERRFILTER"
	}

#
# Submit the files to server
# Use following like form:
#<html>
#    <body>
#        <form enctype="multipart/form-data" action="http://localhost:8080/ext_fileupload" method="post">
#            <input type="file" name="files" multiple />
#            <input type="submit" value="upload" />
#        </form>
#    </body>
#</html>
#
#
/ext_fileupload={"svc":"FILEUPLOAD"
	,"conv":"ext"
	,"errors":"ext"
	,"fileupload":true
	,"tempdir":"${NDRX_APPHOME}/tmp"
	}

#
# Upload error, generate some msg
#
/ext_fileupload_inval={"svc":"FILEUPLOAD"
	,"conv":"ext"
	,"errors":"ext"
	,"fileupload":true
	,"finerr":"UPLDERR"
	,"tempdir":"${NDRX_APPHOME}/non_existing_path"
	}
	
	
#
# TLS tests
#
[@restin/TLS]
tls_enable=1
tls_cert_file=${NDRX_APPHOME}/conf/localhost.crt
tls_key_file=${NDRX_APPHOME}/conf/localhost.key


#
# TMSRV settings for transactions
#
[@global/TRAN]
NDRX_XA_RES_ID=1
NDRX_XA_OPEN_STR=-
NDRX_XA_CLOSE_STR=-
NDRX_XA_DRIVERLIB=libndrxxanulls.${NDRX_LIBEXT}
NDRX_XA_RMLIB=-
NDRX_XA_LAZY_INIT=1

; Environment for Transactional Queue
[@global/TMQ]
NDRX_XA_RES_ID=2
NDRX_XA_OPEN_STR=datadir="${NDRX_APPHOME}/qdata",qspace="QSPACE1"
NDRX_XA_CLOSE_STR=${NDRX_XA_OPEN_STR}
NDRX_XA_DRIVERLIB=libndrxxaqdisks.${NDRX_LIBEXT}
; dylib needed for osx
NDRX_XA_RMLIB=libndrxxaqdisk.${NDRX_LIBEXT}
NDRX_XA_LAZY_INIT=0

#
# Tansaction API testing
#
[@restin/TRAN]
port=8081
ip=0.0.0.0
gencore=1
defaults={}
/transactions={"transaction_handler":true}
/enqueue={"svc":"QADD", "conv":"json2ubf", "errors":"json2ubf"}
/dequeue={"svc":"QGET", "conv":"json2ubf", "errors":"json2ubf"}
# even if failed... (no service defined..)
/enqueue_nofail={"svc":"TXFAIL", "conv":"json2ubf", "errors":"json2ubf","txnoabort":true}
# next commit shall return TPEABORT after this...
/enqueue_fail={"svc":"TXFAIL", "conv":"json2ubf", "errors":"json2ubf"}

# just call sample service
#/svc2/hello=@CCONF

# Default
#errors=http|json|text|jsonubf

#
# For text and raw buffers
#
#errors_fmt_text=Error code %d (%s)

#
# Add to the end of the json block
#
#errors_fmt_json_msg=error_msg:"%s"
#errors_fmt_json_code=error_code:"%d"
#
# Print the code even response is ok
#
#errors_fmt_json_when_ok=1
#
# XX:YY
# XX - TP error
# YY - HTTP error
#
#errors_fmt_http_map=11:404,6:402,*:200

#
# TLS Settigs
#
;tls_enable=1|0
;tls_cert_file=/path/to/cert/file
;tls_key_file=/path/to/key/file
;
;
